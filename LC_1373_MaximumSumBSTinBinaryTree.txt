/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private: 
    int retval = 0; // The default answer LeetCode wants seems to be zero.
                    // The reasoning I suppose is that an empty tree returns 0.
                    // Thus if a non-empty tree were to return a negative, it should be 0.
    vector<int> dfs(TreeNode* root) {
        // Recursive Depth First Search
        // If any subtree is not a BST, then a tree is not a BST.
        // Pass the four values needed:
        // isBST tells if subtree rooted at current node is a BST
        // sum is the sum of values of all nodes in subtree
        // mymin is min value in subtree
        // mymax is max value in subtree
        // If isBST is false, the other three don't matter.
        // This means I could optimize further to avoid some computations.
        // return: isBST, sum, mymin, mymax
        // indexes:   0     1.    2.      3
        
        // if this node has both children
        if (root->left && root->right ) {
            vector<int> retleft = dfs(root->left);
            vector<int> retright = dfs(root->right);
            int isBST;
            if ( root->val>retleft[3] && retleft[0]==1 && root->val<retright[2] && retright[0]==1 ) isBST=1; else isBST=0;
            int mySum = root->val + retright[1] + retleft[1];
            if ( isBST==1 ) retval = max(retval,mySum); // if this is a BST, check if it's a max
            int myMin = root->val;
            for(int ii=2; ii<=3; ii++) myMin = min(myMin, retleft[ii]);
            int myMax = root->val;
            for(int ii=2; ii<=3; ii++) myMax = max(myMax, retright[ii]);
            return {isBST, mySum, myMin, myMax};
        }
        else if (!root->left && root->right ) {
            vector<int> retright = dfs(root->right);
            int isBST;
            if ( root->val<retright[2] && retright[0]==1 ) isBST=1; else isBST=0;
            int mySum = root->val + retright[1];
            if ( isBST==1 ) retval = max(retval,mySum); // if this is a BST, check if it's a max
            int myMin = root->val;
            for(int ii=2; ii<=3; ii++) myMin = min(myMin, retright[ii]);
            int myMax = root->val;
            for(int ii=2; ii<=3; ii++) myMax = max(myMax, retright[ii]);
            return {isBST, mySum, myMin, myMax};
        }
        else if (root->left && !root->right ) {
            vector<int> retleft = dfs(root->left);
            int isBST;
            if ( root->val>retleft[3] && retleft[0]==1 ) isBST=1; else isBST=0;
            int mySum = root->val + retleft[1];
            if ( isBST==1 ) retval = max(retval,mySum); // if this is a BST, check if it's a max
            int myMin = root->val;
            for(int ii=2; ii<=3; ii++) myMin = min(myMin, retleft[ii]);
            int myMax = root->val;
            for(int ii=2; ii<=3; ii++) myMax = max(myMax, retleft[ii]);
            return {isBST, mySum, myMin, myMax};
        }
        // it's a leaf, therefore it is a BST by default
        retval = max(retval,root->val);
        return {1,root->val,root->val,root->val};
    }
public:
    int maxSumBST(TreeNode* root) {
        // runtime = 244ms, which is 50th percentile
        // memory usage = 178MB, which is 25th percentile
        if ( !root ) return 0;
        vector<int> r = dfs(root);
        return retval;
    }
};